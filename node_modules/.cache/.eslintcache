[{"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/index.js":"1","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/LogInSignUp.jsx":"2","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/EditJob.jsx":"3","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/CreateJob.jsx":"4","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/SearchJob.jsx":"5","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/JobDetail.jsx":"6","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/Navbar.jsx":"7","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/EntryResult.jsx":"8"},{"size":926,"mtime":1651900791217,"results":"9","hashOfConfig":"10"},{"size":3219,"mtime":1639468289000,"results":"11","hashOfConfig":"10"},{"size":5523,"mtime":1639468289000,"results":"12","hashOfConfig":"10"},{"size":5293,"mtime":1639468289000,"results":"13","hashOfConfig":"10"},{"size":688,"mtime":1639468289000,"results":"14","hashOfConfig":"10"},{"size":6046,"mtime":1639468289000,"results":"15","hashOfConfig":"10"},{"size":2351,"mtime":1651892376859,"results":"16","hashOfConfig":"10"},{"size":1655,"mtime":1639468289000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n64z0e",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/index.js",[],[],"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/LogInSignUp.jsx",[],[],[],"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/EditJob.jsx",["45","46"],[],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router';\nimport Navbar from './Navbar';\nimport \"../css/Common.css\";\nimport axios from 'axios';\n\n// All good\nexport default function EditJob () {\n    const [user, setUser] = useState();\n    const [job, setJob] = useState({\n        title: '',\n        company: '',\n        location: '',\n        description: '',\n        email: '',\n        website: '',\n    });\n\n    let navigate = useNavigate();\n    let { jobId } = useParams();\n\n    function getJobInfo(){\n        axios.get('/api/job/findJobById/' + jobId)\n            .then(response => {\n                setJob({\n                    title: response.data.title,\n                    company: response.data.company,\n                    location: response.data.location,\n                    description: response.data.description,\n                    email: response.data.email,\n                    website: response.data.website,\n                })\n            })\n            .catch(error => console.log(error))\n    }\n\n    useEffect(getJobInfo, [])\n\n    function userLoggedIn() {\n        axios.get('/api/user/userLoggedIn')\n            .then(response => {\n                setUser(response.data);\n            })\n            .catch(error => console.error(error));\n    }\n    useEffect(userLoggedIn, []);\n\n    return (\n        <div class='vertical'>\n            <Navbar/>\n            <grid-container>\n                <box1>\n                    <grid-item>\n                        <h2>Job Title:</h2>\n                    </grid-item>\n                </box1>\n                <box2>\n                    <grid-item>\n                        <input value={job.title} onChange={(e) => {\n                            const title = e.target.value;\n                            setJob({\n                                ...job,\n                                title: title\n                            })\n                        }}/>\n                    </grid-item>\n                </box2>\n                <box3>\n                    <grid-item>\n                        <h2>Company:</h2>\n                    </grid-item>\n                </box3>\n                <box4>\n                    <grid-item>\n                        <input value={job.company} onChange={(e) => {\n                            const company = e.target.value;\n                            setJob({\n                                ...job,\n                                company: company\n                            })\n                        }}/>  \n                    </grid-item>\n                </box4>\n                <box5>\n                    <grid-item>\n                        <h2>Location:</h2>\n                    </grid-item>\n                </box5>\n                <box6>\n                    <grid-item>\n                        <input value={job.location} onChange={(e) => {\n                            const location = e.target.value;\n                            setJob({\n                                ...job,\n                                location: location\n                            })\n                        }}/>\n                    </grid-item>\n                </box6>\n                <box7>\n                    <grid-item>\n                        <h2>Job Description:</h2>\n                    </grid-item>\n                </box7>\n                <box8>\n                    <grid-item>\n                        <textarea value={job.description} onChange={(e) => {\n                            const description = e.target.value;\n                            setJob({\n                                ...job,\n                                description: description\n                            })\n                        }}/>\n                    </grid-item>\n                </box8>\n                <box9>\n                    <grid-item>\n                        <h2>Contact Email:</h2>\n                    </grid-item>\n                </box9>\n                <box10>\n                    <grid-item>\n                        <input type='email' value={job.email} onChange={(e) => {\n                            const email = e.target.value;\n                            setJob({\n                                ...job,\n                                email: email\n                            })\n                        }}/>\n                    </grid-item>\n                </box10>\n                <box11>\n                    <grid-item>\n                        <h2>Company Website: (Optional)</h2>\n                    </grid-item>\n                </box11>\n                <box12>\n                    <grid-item>\n                    <input value={job.website} onChange={(e) => {\n                        const website = e.target.value;\n                        setJob({\n                            ...job,\n                            website: website\n                        })\n                    }}/>\n                    </grid-item>\n                </box12>\n\n            </grid-container>\n\n        <button class = 'button' onClick={() => {\n            axios.put('/api/job/update/' + jobId, job)\n            .then(updatedJobResponse => {\n                console.log(updatedJobResponse);\n                navigate(\"/jobDetail/\" + jobId);\n            })\n            .catch(error => {\n                console.error(error)\n                alert(\"All information (except for company website) are required!\");\n            });\n            \n        }}>Save Change</button>\n    </div>\n\n    )\n}","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/CreateJob.jsx",[],[],"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/SearchJob.jsx",[],[],"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/JobDetail.jsx",["47"],[],"import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useParams } from 'react-router';\nimport Navbar from './Navbar';\nimport \"../css/Common.css\";\nimport axios from 'axios';\nimport dateFormat from \"dateformat\";\n\n// All good\nexport default function JobDetail () {\n    const [user, setUser] = useState();\n    const [Job, setJob] = useState([]);\n    const [favorite, setFavorite] = useState(0);\n    const [buttonText, setButtonText] = useState('Favorite');\n    const [created, setCreatedJob] = useState(false);\n\n    let { jobId } = useParams();\n    let navigate = useNavigate();\n\n    function userLoggedIn() {\n        axios.get('/api/user/userLoggedIn')\n            .then(response => {\n                setUser(response.data);\n            })\n            .catch(error => console.error(error));\n    }   \n    useEffect(userLoggedIn, []);\n\n    function findJob() {\n        axios.get('http://localhost:8000/api/job/findJobById/' + jobId)\n            .then(response => {\n                setJob(response.data)\n            })\n            .catch(error => console.error(error));\n    }\n\n    useEffect(findJob, []);\n\n    function favoriteJob(){\n        if(favorite === 0){\n            axios.post('/api/user/addFavorite/' + user + '/' + jobId)\n            .then(response => {\n                console.log(response);\n            })\n            .catch(error => console.error(error));\n            setFavorite(1);\n            setButtonText(\"Unfavorite\");\n        }\n        else{\n            axios.delete('/api/user/deleteFavorite/' + user + '/' + jobId)\n            .then(response => {\n                console.log(response);\n            })\n            .catch(error => console.error(error));\n            setFavorite(0);\n            setButtonText(\"Favorite\");\n        }\n    }\n    \n\n    if(user){\n        axios.get('/api/user/findAllFavorites/' + user)\n            .then(response => {\n                let favoriteJob = response.data.favorites;\n                if(favoriteJob.includes(jobId)){\n                    setFavorite(1);\n                }\n            })\n            .catch(error => console.error(error));\n        \n        axios.get('/api/user/findAllCreated/' + user)\n            .then(response => {\n                let createdJob = response.data.created;\n                if(createdJob.includes(jobId)){\n                    setCreatedJob(true);\n                }\n            })\n            .catch(error => console.error(error));\n    }\n\n    return (\n        <div class='vertical'>\n            <Navbar />\n            <grid-container>\n                <box1>\n                    <grid-item>\n                        <h2>Job Title:</h2>\n                    </grid-item>\n                </box1>\n                <box2>\n                    <grid-item>\n                        <h2>{Job.title}</h2>\n                    </grid-item>\n                </box2>\n                <box3>\n                    <grid-item>\n                        <h2>Company:</h2>\n                    </grid-item>\n                </box3>\n                <box4>\n                    <grid-item>\n                        <h2>{Job.company}</h2>\n                    </grid-item>\n                </box4>\n                <box5>\n                    <grid-item>\n                        <h2>Location:</h2>\n                    </grid-item>\n                </box5>\n                <box6>\n                    <grid-item>\n                        <h2>{Job.location}</h2>\n                    </grid-item>\n                </box6>\n                <box7>\n                    <grid-item>\n                        <h2>Job Description:</h2>\n                    </grid-item>\n                </box7>\n                <box8>\n                    <grid-item>\n                        <h2>{Job.description}</h2>\n                    </grid-item>\n                </box8>\n                <box9>\n                    <grid-item>\n                        <h2>Contact Email:</h2>\n                    </grid-item>\n                </box9>\n                <box10>\n                    <grid-item>\n                        <h2>{Job.email}</h2>\n                    </grid-item>\n                </box10>\n                <box11>\n                    <grid-item>\n                        <h2>Company Website: (Optional)</h2>\n                    </grid-item>\n                </box11>\n                <box12>\n                    <grid-item>\n                        <h2>{Job.website}</h2>\n                    </grid-item>\n                </box12>\n                <box13>\n                    <grid-item>\n                        <h2>Posting Date:</h2>\n                    </grid-item>\n                </box13>\n                <box14>\n                    <grid-item>\n                        <h2>{dateFormat(Job.date, \"yyyy-mm-dd\")}</h2>\n                    </grid-item>\n                </box14>\n\n            </grid-container>\n            {!created &&\n                <div class='horizontal'>\n                <button class='button' onClick={() => { \n                    if (user) {\n                        favoriteJob();\n                    }\n                    else {\n                        navigate(\"/loginsignup\"); \n                    }\n                    }}>{buttonText}</button>\n                </div>\n            }\n            {created &&\n                <div class='horizontal'>\n                    <button class='button' onClick={() => {\n                            favoriteJob()\n                        }}>{buttonText}</button>\n                    <button class='button' onClick={() => navigate(\"/edit/\" + jobId)}>Edit</button>\n                    <button class='button' onClick={() => {\n                        axios.delete('/api/job/delete/' + jobId)\n                            .then(response => {\n                                console.log(response);\n                                navigate(-1);\n                            })\n                            .catch(error => console.error(error));\n                    }}>Delete</button>\n                </div>\n            }\n        </div>\n    )\n}","/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/Navbar.jsx",[],[],"/Users/yutianqifu/Desktop/Courses/5610/project3/cs5610-project3/src/component/EntryResult.jsx",["48"],[],{"ruleId":"49","severity":1,"message":"50","line":10,"column":12,"nodeType":"51","messageId":"52","endLine":10,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":38,"column":27,"nodeType":"55","endLine":38,"endColumn":29,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"54","line":37,"column":24,"nodeType":"55","endLine":37,"endColumn":26,"suggestions":"57"},{"ruleId":"53","severity":1,"message":"58","line":29,"column":28,"nodeType":"55","endLine":29,"endColumn":30,"suggestions":"59"},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'jobId'. Either include it or remove the dependency array.","ArrayExpression",["60"],["61"],"React Hook useEffect has a missing dependency: 'job'. Either include it or remove the dependency array.",["62"],{"desc":"63","fix":"64"},{"desc":"63","fix":"65"},{"desc":"66","fix":"67"},"Update the dependencies array to be: [jobId]",{"range":"68","text":"69"},{"range":"70","text":"69"},"Update the dependencies array to be: [job]",{"range":"71","text":"72"},[1119,1121],"[jobId]",[1145,1147],[874,876],"[job]"]